/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TableCheckboxesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TableCheckboxesPlugin = class extends import_obsidian.Plugin {
  loadView() {
  }
  async onload() {
    let view = null;
    this.app.workspace.onLayoutReady(() => view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView));
    this.registerDomEvent(document, "keyup", (evt) => {
      if (evt.key == "]" && view) {
        const location = view.editor.getCursor("anchor");
        const rowValue = view.editor.getLine(location.line);
        if (this.isMDCheckboxInTable(rowValue)) {
          const checkBox = this.getCheckboxLength(rowValue);
          if (checkBox) {
            const start = { ...location };
            start.ch -= checkBox[0].length;
            view.editor.setSelection(start, location);
            view.editor.replaceSelection('<input type="checkbox" unchecked> ');
          }
        }
      }
    });
    this.registerDomEvent(document, "change", (evt) => {
      if (evt.target instanceof HTMLInputElement && view && evt.target.hasAttribute("data-task") == false) {
        const checkbox = evt.target;
        if (checkbox.getAttribute("type") == "checkbox") {
          let page = view.getViewData();
          if (this.isHTMLCheckboxInTable(page)) {
            const table = this.findTableInPath(evt);
            const allTables = this.getAllTables(page);
            const tableLoc = this.getTableLocation(page, allTables, table);
            const cellLoc = this.getCellLocation(evt, tableLoc);
            this.toggleCheckbox(page, view, checkbox, cellLoc);
          }
        }
      }
    });
  }
  onunload() {
  }
  getAllTables(page) {
    const tableHeaderRegex = /(?<=(\n){2}|^)([^\r\n]*\|[^\r\n]*(\r?\n)?)+(?=(\r?\n){2}|$)/gm;
    const allTables = page.match(tableHeaderRegex);
    return allTables;
  }
  getTableLocation(page, allTables, table) {
    let tableInFile;
    allTables.forEach((mdTable) => {
      const htmlValues = (0, import_obsidian.htmlToMarkdown)(table).split("\n").map((element) => {
        return element.trim().replace("-", "").replace("\\", "|").replace(/\s/g, "");
      }).filter((element) => {
        return element !== "";
      });
      const mdValues = mdTable.split("|").map((element) => {
        return element.trim().replace('<input type="checkbox" checked>', "").replace('<input type="checkbox" unchecked>', "").replace("\\", "|").replace(/\s/g, "");
      }).filter((element) => {
        return element !== "" && element !== "\n" && element.match(new RegExp("[^-]"));
      });
      let result = true;
      for (let i = 0; i < htmlValues.length; i++) {
        if (htmlValues[i] !== mdValues[i]) {
          result = false;
          break;
        }
      }
      if (result) {
        tableInFile = mdTable;
      }
    });
    const rowNumber = page.split("\n").indexOf(tableInFile.split("\n")[0]);
    return rowNumber;
  }
  getCellLocation(evt, rowNumber) {
    try {
      const columnIndex = evt.composedPath().find((td) => td.nodeName.toLowerCase() === "td").cellIndex + 1;
      const rowIndex = evt.composedPath().find((tr) => tr.nodeName.toLowerCase() === "tr").rowIndex + rowNumber + 1;
      return [rowIndex, columnIndex];
    } catch (error) {
      const columnIndex = evt.composedPath().find((th) => th.nodeName.toLowerCase() === "th").cellIndex + 1;
      const rowIndex = evt.composedPath().find((tr) => tr.nodeName.toLowerCase() === "tr").rowIndex + rowNumber;
      return [rowIndex, columnIndex];
    }
  }
  findTableInPath(evt) {
    const path = evt.composedPath();
    const table = path.find((table2) => table2.nodeName.toLowerCase() === "table");
    return table;
  }
  isMDCheckboxInTable(row) {
    const tableRegex = /\|[\s]*-[\s]?\[[\s]?\].*\|/;
    if (row.match(tableRegex)) {
      return true;
    }
    return false;
  }
  isHTMLCheckboxInTable(row) {
    const tableRegex = /\|[\s]*<input type="checkbox" (un)?checked>.*\|/;
    if (row.match(tableRegex)) {
      return true;
    }
    return false;
  }
  getCheckboxLength(row) {
    const checkboxRegex = /-[\s]?[[\s]?]/;
    const checkBox = row.match(checkboxRegex);
    return checkBox;
  }
  toggleCheckbox(page, view, checkbox, cellLoc) {
    const columnRegex = /(?<!\\)\|/g;
    let lines = page.split("\n");
    let row = lines[cellLoc[0]];
    const cells = row.split(columnRegex);
    if (checkbox.checked) {
      cells[cellLoc[1]] = cells[cellLoc[1]].replace('<input type="checkbox" unchecked>', '<input type="checkbox" checked>');
    } else {
      cells[cellLoc[1]] = cells[cellLoc[1]].replace('<input type="checkbox" checked>', '<input type="checkbox" unchecked>');
    }
    row = cells.join("|");
    lines[cellLoc[0]] = row;
    this.app.vault.modify(view.file, lines.join("\n"));
  }
};
//# sourceMappingURL=data:application/json;base64,
